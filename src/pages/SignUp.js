import React from "react";
import {
  Button,
  Grid,
  Header,
  Message,
  Segment,
  Icon,
  Checkbox,
} from "semantic-ui-react";
import { Input, Form } from "semantic-ui-react-form-validator";
import { NavLink } from "react-router-dom";

import { useMutation } from "@apollo/react-hooks";
import { connect } from "../Context";
import { REGISTER } from "../Queries";
const SingUp = ({ context }) => {
  const [state, setState] = React.useState({
    phone: "",
    password: "",
    password2: "",
    accept: false,
    Error: {
      type: "",
      target: "",
    },
  });

  const [register, { data, loading, error }] = useMutation(REGISTER);
  const handleChane = (e, { name, value }) => {
    setState({ ...state, [name]: value });
  };
  const handleSubmit = (e) => {
    e.persist();

    const { Error, password2, ...rest } = state;
    if (state.password !== password2) {
      return setState({ ...state, Error: "NSP" });
    }

    // let cPhone = ONLY_NUMBER_REGEX.test(state.phone);
    //let cPassword = PASSWORD_REGEX.test(state.password);
    // let cfirstname = NAME_REGEX.test(state.firstname);
    // let clastname = NAME_REGEX.test(state.lastname);

    const newuser = register({
      variables: {
        phonenumber: parseInt(rest.phone, 10),
        password: rest.password,
      },
    })
      .then((r) => {
        context.setSession(r.data);
      })
      .catch((e) => console.log(e));
    return newuser;
  };
  return (
    <Grid textAlign="center" style={{ height: "100vh" }} verticalAlign="middle">
      <Grid.Column style={{ maxWidth: 500 }}>
        <Message attached="top" warning>
          <Icon name="help" />
          –ë“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –≥—ç–∂ “Ø“Ø? <NavLink to="/–Ω—ç–≤—Ç—Ä—ç—Ö">–ù—ç–≤—Ç—Ä—ç—Ö</NavLink>
        </Message>
        {error && (
          <Message color="red">
            {error.graphQLErrors.map((e) => e.message)}
          </Message>
        )}
        <Segment padded loading={loading}>
          <Header as="h2" color="orange" textAlign="center">
            –®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–ª
          </Header>
          <Form
            id="SIGN_UP_FORM"
            onSubmit={(e) => {
              handleSubmit(e);
            }}
          >
            <Input
              width={16}
              size="big"
              fluid
              label={"(+976)"}
              inline="true"
              name="phone"
              value={state.phone}
              validators={[
                "required",
                "isNumber",
                "minNumber:11111111",
                "maxNumber:99999999",
              ]}
              errorMessages={[
                "–¢–∞ —É—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                "üî¢ —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                "üòï",
                "‚öñÔ∏è —Ö—ç—Ç –∏—Ö –±–∞–π–Ω–∞",
              ]}
              iconPosition="left"
              placeholder="—É—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä"
              onChange={handleChane}
            />

            <Input
              icon="lock"
              size="big"
              name="password"
              value={state.password}
              width={16}
              iconPosition="left"
              validators={[
                "required",
                "isString",
                // "matchRegexp:^(?=[^a-z]*[a-z])(?=D*d)[^:&.~s]{8,20}$"
              ]}
              errorMessages={[
                "–¢–∞ –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É",
                "–•–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 8, —è–¥–∞–∂ –Ω—ç–≥ —Ç–æ–º “Ø—Å—ç–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É",
              ]}
              placeholder="–Ω—É—É—Ü “Ø–≥"
              type="password"
              onChange={handleChane}
            />

            <Input
              icon="repeat"
              iconPosition="left"
              width={16}
              size="big"
              state={state.password2}
              placeholder="–Ω—É—É—Ü “Ø–≥—ç—ç –¥–∞–≤—Ç–∞—Ö"
              type="password"
              name="password2"
              onChange={handleChane}
            />
          </Form>
        </Segment>
        <Message attached="bottom" color={state.accept ? "green" : "yellow"}>
          –ë–∏ BodBog.mn —Å–∞–π—Ç—ã–Ω{" "}
          <NavLink to="/“Ø–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π-–Ω”©—Ö—Ü”©–ª">“Ø–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π –Ω”©—Ö—Ü”©–ª</NavLink>, –∑–∞—Ä
          –Ω–∏–π—Ç–ª—ç—Ö –∂—É—Ä–º—ã–≥ —Ö“Ø–ª—ç—ç–Ω –∑”©–≤—à”©”©—Ä—á, –º”©–Ω ”©”©—Ä–∏–π–≥”©”© 18 –Ω–∞—Å —Ö“Ø—Ä—Å—ç–Ω –±–æ–ª–æ—Ö—ã–≥
          –±–∞—Ç–∞–ª–∂ –±–∞–π–Ω–∞
          <Checkbox
            onClick={(e) => setState({ ...state, accept: !state.accept })}
            required
            label="üëå –ó”©–≤—à”©”©—Ä”©—Ö"
          />
        </Message>
        {state.accept ? (
          <Message color="violet" floating>
            ‚òùÔ∏èüßê –ë–∞—Ç–ª–∞—Ö —Ç–æ–≤—á–ª—É—É—Ä—ã–≥ –¥–∞—Ä—Å–Ω–∞–∞—Ä —Ç–∞ “Ø–π–ª—á–∏–ª–≥—ç—ç–Ω–∏–π –Ω”©—Ö—Ü”©–ª, –∑–∞—Ä –Ω–∏–π—Ç–ª—ç—Ö
            –∂—É—Ä–∞–º, –Ω—É—É—Ü–ª–∞–ª—ã–Ω –±–æ–¥–ª–æ–≥–æ –±–æ–ª–æ–Ω –ú–æ–Ω–≥–æ–ª —É–ª—Å—ã–Ω —Ö–æ–ª–±–æ–≥–¥–æ—Ö —Ö—É—É–ª—å
            —Ç–æ–≥—Ç–æ–æ–º–∂–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∑”©–≤—à”©”©—Ä—á –±—É–π –±–æ–ª–Ω–æ.
          </Message>
        ) : null}
        <Button
          disabled={!state.accept}
          type="submit"
          form="SIGN_UP_FORM"
          color="orange"
          fluid
          size="huge"
        >
          –ë–∞—Ç–ª–∞—Ö
        </Button>
      </Grid.Column>
    </Grid>
  );
};

export default connect(SingUp);
