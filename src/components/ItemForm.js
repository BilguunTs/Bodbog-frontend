import React, { Component } from "react";
import {
  Button,
  Radio,
  FormGroup,
  Label,
  Checkbox,
  Icon,
} from "semantic-ui-react";
import { Mutation } from "react-apollo";
import { ADD_HERD } from "../Queries";
import { connect } from "../Context";
import {
  Form,
  Input,
  Dropdown,
  TextArea,
} from "semantic-ui-react-form-validator";
import { fivestar } from "../config";
const options = [
  { key: ".sell", text: "–ó–∞—Ä–∞—Ö–∞–∞—Ä", value: "sell" },
  { key: ".deal", text: "–¢–æ—Ö–∏—Ä–æ–ª—Ü–æ—Ö–æ–æ—Ä", value: "deal" },
  { key: ".free", text: "“Æ–Ω—ç–≥“Ø–π", value: "free" },
];
class ItemForm extends Component {
  /*componentDidUpdate(prevProps, prevState) {
    if (this.state.type !== prevState.type && this.state.type !== "") {
      this.setState({ errorat: null });
    }
  }*/
  constructor(props) {
    super(props);
    this.form = React.createRef();
    this.state = { toggled: false, detail: false };
  }
  handleChangeForm = (e, { name, value }) => {
    const { updateHerd } = this.props.context;

    updateHerd(name, value);
  };
  handleChangeRatio = (e, { value }) => {
    const { updateHerdAge } = this.props.context;
    updateHerdAge(value);
  };

  clearField = () => this.props.context.clearHerd();
  renderExpandButtons = () => {
    if (!this.state.detail) {
      return (
        <Button
          icon
          labelPosition="right"
          type="button"
          style={{ marginBottom: "1.2rem" }}
          onClick={() => this.setState({ ...this.state, detail: true })}
        >
          –î—ç–ª—ç–≥—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –Ω—ç–º—ç—Ö
          <Icon name="plus" />
        </Button>
      );
    } else {
      return (
        <Button
          icon
          labelPosition="right"
          type="button"
          color="red"
          style={{ marginBottom: "1.2rem" }}
          onClick={() => this.setState({ ...this.state, detail: false })}
        >
          –î—ç–ª—ç–≥—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞—Å–∞—Ö
          <Icon name="cancel" />
        </Button>
      );
    }
  };
  render() {
    const {
      age,
      type,
      color,
      weight,
      height,
      price,
      amount,
      description,
      ads_type,
    } = this.props.context.state.herd;

    return (
      <Mutation mutation={ADD_HERD}>
        {(addHerd, { loading, error }) => (
          <>
            <Form
              onSubmit={async (e) => {
                e.persist();
                this.props.context.openModal("address");
              }}
            >
              <Checkbox
                style={{ marginBottom: "1rem" }}
                className="paint"
                onChange={(_, d) => this.setState({ toggled: d.checked })}
                toggle
                label={this.state.toggled ? "–û–ª–æ–Ω" : "–ì–∞–Ω—Ü"}
              ></Checkbox>
              <FormGroup>
                <Dropdown
                  label="–¢”©—Ä”©–ª"
                  name="type"
                  selection
                  size="big"
                  value={type}
                  options={fivestar}
                  placeholder="—Ö–æ–Ω—å “Ø—Ö—ç—Ä –≥–º"
                  onChange={this.handleChangeForm}
                />

                {this.state.toggled ? (
                  <Input
                    value={amount}
                    name="amount"
                    onChange={this.handleChangeForm}
                    label="–®–∏—Ä—Ö—ç–≥–∏–π–Ω —Ç–æ–æ"
                    validators={[
                      "required",
                      "isNumber",
                      "minNumber:2",
                      "maxNumber:9999",
                    ]}
                    errorMessages={[
                      "—ç–Ω—ç —Ö—ç—Å–≥–∏–π–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      "üî¢ —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      "üòï 2 –æ–æ—Å –¥—ç—ç—à —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      `üò± —Ö—ç—Ç –∏—Ö –±–∞–π–Ω–∞`,
                    ]}
                  />
                ) : null}
              </FormGroup>
              {this.renderExpandButtons()}
              {this.state.detail && (
                <FormGroup inline style={{ justifyContent: "space-evenly" }}>
                  <label>–ù–∞—Å</label>
                  {[1, 2, 3, 4, 5, 6].map((v, i) => (
                    <Radio
                      key={i}
                      label={`${v}${v === 6 ? "+" : ""}`}
                      value={v}
                      type="radio"
                      checked={age === v}
                      onChange={this.handleChangeRatio}
                    />
                  ))}
                </FormGroup>
              )}
              {this.state.detail && (
                <FormGroup>
                  <Input
                    placeholder={
                      this.state.toggled ? "–î—É–Ω–¥–∞–∂ –∂–∏–Ω" : "–ñ–∏–Ω –æ—Ä—É—É–ª–∞—Ö"
                    }
                    name="weight"
                    value={weight}
                    width={16}
                    size="big"
                    labelPosition="right"
                    onChange={this.handleChangeForm}
                    validators={["isNumber", "minNumber:5", "maxNumber:9999"]}
                    errorMessages={[
                      "üî¢ —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      "üòï",
                      `üò± –¥—ç–ª—Ö–∏–π–Ω —Ö–∞–º–≥–∏–π–Ω —Ö“Ø–Ω–¥ ${type.toLowerCase()} –≥—ç–∂ “Ø“Ø`,
                    ]}
                  >
                    <input />
                    <Label>–ö–≥</Label>
                  </Input>

                  <Input
                    placeholder={
                      this.state.toggled ? "–î—É–Ω–¥–∞–∂ ”©–Ω–¥”©—Ä" : "”®–Ω–¥”©—Ä –æ—Ä—É—É–ª–∞—Ö..."
                    }
                    width={16}
                    name="height"
                    labelPosition="right"
                    value={height}
                    size="big"
                    onChange={this.handleChangeForm}
                    validators={["isNumber", "minNumber:10", "maxNumber:3000"]}
                    errorMessages={[
                      "üî¢ —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      "üòï",
                      `üò± –¥—ç–ª—Ö–∏–π–Ω —Ö–∞–º–≥–∏–π–Ω ”©–Ω–¥”©—Ä ${type.toLowerCase()} –≥—ç–∂ “Ø“Ø`,
                    ]}
                  >
                    <input />
                    <Label>–°–º</Label>
                  </Input>
                </FormGroup>
              )}
              <FormGroup>
                {ads_type === "ON_SELL" && (
                  <Input
                    name="price"
                    type="text"
                    value={price}
                    onChange={this.handleChangeForm}
                    size="big"
                    label={
                      <Dropdown
                        size="big"
                        defaultValue="sell"
                        options={options}
                      />
                    }
                    validators={[
                      "required",
                      "isNumber",
                      "minNumber:0",
                      "maxNumber:9999999",
                    ]}
                    errorMessages={[
                      "–¢–∞ “Ø–Ω—ç —ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      "üî¢ —Ç–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
                      "üòï",
                      "‚öñÔ∏è —Ö—ç—Ç –∏—Ö –±–∞–π–Ω–∞",
                    ]}
                    placeholder={this.state.toggled ? "–ù—ç–≥–∂–∏–π–Ω “Ø–Ω—ç‚ÇÆ" : "“Æ–Ω—ç‚ÇÆ"}
                    labelPosition="left"
                  />
                )}
                {this.state.detail && (
                  <Input
                    label={this.state.toggled ? "–ó“Ø—Å –µ—Ä”©–Ω—Ö–∏–π" : "–ó“Ø—Å"}
                    size="big"
                    name="color"
                    value={color}
                    validators={["isString"]}
                    errorMessages={["üåà ”®–Ω–≥”©”©—Ä –∏–ª—ç—Ä—Ö–∏–π–ª–Ω“Ø“Ø"]}
                    placeholder="—Ö“Ø—Ä—ç–Ω –∞–ª–∞–≥ –≥–º"
                    onChange={this.handleChangeForm}
                  />
                )}
              </FormGroup>
              {this.state.detail && (
                <TextArea
                  name="description"
                  width={16}
                  rows={10}
                  size="big"
                  label={"–î—ç–ª—ç–≥—Ä—ç–Ω–≥“Ø–π —Ç–∞–π–ª–±–∞—Ä"}
                  value={description}
                  onChange={this.handleChangeForm}
                  placeholder="–ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª –±–æ–ª–æ–Ω –¥—É—Ä–¥–∞–≥–¥–∞–∞–≥“Ø–π –∑“Ø–π–ª—Å "
                />
              )}

              <div style={{ display: "flex", justifyContent: "space-between" }}>
                <Button
                  labelPosition="left"
                  icon="arrow left"
                  size="small"
                  color="yellow"
                  size="big"
                  basic
                  content="–ë—É—Ü–∞—Ö"
                  onClick={() => this.props.before()}
                ></Button>
                <Button
                  positive
                  labelPosition="right"
                  icon="add"
                  type="submit"
                  size="big"
                  content="–ù–∏–π—Ç–ª—ç—Ö"
                ></Button>
              </div>
            </Form>
          </>
        )}
      </Mutation>
    );
  }
}

export default connect(ItemForm);
/**
 *    <Input
              style={{ margin: "0 3rem .5rem 0" }}
              label={{ basic: true, content: "k–≥" }}
              labelPosition="right"
              placeholder="–ñ–∏–Ω –æ—Ä—É—É–ª–∞—Ö..."
              name="weight"
              onChange={this.handleChangeForm}
            />

            <Input
              style={{ marginBottom: ".5rem" }}
              label={{ basic: true, content: "—Å–º" }}
              labelPosition="right"
              placeholder="”®–Ω–¥”©—Ä –æ—Ä—É—É–ª–∞—Ö..."
              name="height"
              onChange={this.handleChangeForm}
            />
 *    <Form.Group inline>
              <label>–Ω–∞—Å</label>

              <Form.Radio
                label="1"
                value={1}
                checked={age === 1}
                onChange={this.handleChangeRatio}
              />
              <Form.Radio
                label="2"
                value={2}
                checked={age === 2}
                onChange={this.handleChangeRatio}
              />
              <Form.Radio
                label="3"
                value={3}
                checked={age === 3}
                onChange={this.handleChangeRatio}
              />
              <Form.Radio
                label="4"
                value={4}
                checked={age === 4}
                onChange={this.handleChangeRatio}
              />
              <Form.Radio
                label="5"
                value={5}
                checked={age === 5}
                onChange={this.handleChangeRatio}
              />
              <Form.Radio
                label="6+"
                value={6}
                checked={age === 6}
                onChange={this.handleChangeRatio}
              />
            </Form.Group>
 */
